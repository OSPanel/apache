name: Apache HTTPD Build for Windows (MSYS2)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'build_all.sh'
      - '.github/workflows/build-apache.yml'
  pull_request:
    branches: [ main ]
  schedule:
    # Запуск каждое воскресенье в 02:00 UTC для проверки новых версий
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug
      platform:
        description: 'Platform'
        required: true
        default: 'x64'
        type: choice
        options:
          - x64
          - x86
      install_pdb:
        description: 'Install PDB files'
        required: true
        default: false
        type: boolean

env:
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'Release' }}
  PLATFORM: ${{ github.event.inputs.platform || 'x64' }}
  INSTALL_PDB: ${{ github.event.inputs.install_pdb == 'true' && 'ON' || 'OFF' }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      cache_key: ${{ steps.cache_key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if build is needed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '\.(sh|yml)$'; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate cache key
        id: cache_key
        run: |
          key="apache-build-${{ env.PLATFORM }}-${{ env.BUILD_TYPE }}-$(date +'%Y-%m-%d')"
          echo "key=$key" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    if: needs.prepare.outputs.should_build == 'true'
    runs-on: windows-latest
    timeout-minutes: 180
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x64
            msystem: MINGW64
          - platform: x86
            msystem: MINGW32
    
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            base-devel
            git
            curl
            tar
            unzip
            cmake
            make
            perl
            sed
            mingw-w64-${{ matrix.platform == 'x64' && 'x86_64' || 'i686' }}-toolchain
            mingw-w64-${{ matrix.platform == 'x64' && 'x86_64' || 'i686' }}-cmake
            mingw-w64-${{ matrix.platform == 'x64' && 'x86_64' || 'i686' }}-pkg-config

      - name: Cache source packages
        uses: actions/cache@v4
        with:
          path: /c/Development/Apache24/src
          key: apache-sources-${{ hashFiles('build_all.sh') }}
          restore-keys: |
            apache-sources-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            /c/Development/Apache24/build
            /c/Apache24
          key: ${{ needs.prepare.outputs.cache_key }}-${{ hashFiles('build_all.sh') }}
          restore-keys: |
            apache-build-${{ matrix.platform }}-${{ env.BUILD_TYPE }}-

      - name: Create LUA CMakeLists.txt
        run: |
          cat > CMakeLists.txt << 'EOF'
          cmake_minimum_required(VERSION 3.5)
          project(lua C)
          
          set(LUA_VERSION_MAJOR 5)
          set(LUA_VERSION_MINOR 4)
          set(LUA_VERSION_PATCH 8)
          
          add_definitions(-DLUA_COMPAT_ALL)
          
          set(LUA_CORE_SOURCES
              src/lapi.c src/lcode.c src/lctype.c src/ldebug.c src/ldo.c src/ldump.c
              src/lfunc.c src/lgc.c src/llex.c src/lmem.c src/lobject.c src/lopcodes.c
              src/lparser.c src/lstate.c src/lstring.c src/ltable.c src/ltm.c
              src/lundump.c src/lvm.c src/lzio.c)
          
          set(LUA_LIB_SOURCES
              src/lauxlib.c src/lbaselib.c src/lcorolib.c src/ldblib.c src/liolib.c
              src/lmathlib.c src/loslib.c src/lstrlib.c src/ltablib.c src/lutf8lib.c
              src/loadlib.c src/linit.c)
          
          add_library(lua SHARED ${LUA_CORE_SOURCES} ${LUA_LIB_SOURCES})
          add_library(lua_static STATIC ${LUA_CORE_SOURCES} ${LUA_LIB_SOURCES})
          
          add_executable(lua_exe src/lua.c)
          target_link_libraries(lua_exe lua)
          set_target_properties(lua_exe PROPERTIES OUTPUT_NAME lua)
          
          add_executable(luac src/luac.c)
          target_link_libraries(luac lua_static)
          
          install(TARGETS lua lua_static lua_exe luac
                  RUNTIME DESTINATION bin
                  LIBRARY DESTINATION lib
                  ARCHIVE DESTINATION lib)
          
          install(FILES
                  src/lua.h src/luaconf.h src/lualib.h src/lauxlib.h src/lua.hpp
                  DESTINATION include)
          EOF

      - name: Set environment variables
        run: |
          echo "PLATFORM=${{ matrix.platform }}" >> $GITHUB_ENV
          echo "BUILD_TYPE=${{ env.BUILD_TYPE }}" >> $GITHUB_ENV
          echo "INSTALL_PDB=${{ env.INSTALL_PDB }}" >> $GITHUB_ENV

      - name: Verify prerequisites
        run: |
          echo "Checking required tools..."
          which curl cmake make gcc perl sed tar || exit 1
          echo "Tools verification passed"
          
          echo "Environment variables:"
          echo "PLATFORM: $PLATFORM"
          echo "BUILD_TYPE: $BUILD_TYPE"
          echo "INSTALL_PDB: $INSTALL_PDB"

      - name: Make script executable
        run: chmod +x build_all.sh

      - name: Run build script
        run: |
          export MAKEFLAGS="-j$(nproc)"
          ./build_all.sh

      - name: Verify build results
        run: |
          echo "Checking build outputs..."
          ls -la /c/Apache24/bin/ || echo "No bin directory"
          ls -la /c/Apache24/lib/ || echo "No lib directory"
          ls -la /c/Apache24/modules/ || echo "No modules directory"
          
          if [[ -f "/c/Apache24/bin/httpd.exe" ]]; then
            echo "✅ Apache HTTPD built successfully"
            /c/Apache24/bin/httpd.exe -v
          else
            echo "❌ Apache HTTPD build failed"
            exit 1
          fi

      - name: Create build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Install PDB**: ${{ env.INSTALL_PDB }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f "/c/Apache24/bin/httpd.exe" ]]; then
            echo "### ✅ Build Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            /c/Apache24/bin/httpd.exe -v >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Build Status: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Components" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          components=("httpd.exe" "rotatelogs.exe" "ab.exe" "htpasswd.exe" "htdbm.exe")
          for comp in "${components[@]}"; do
            if [[ -f "/c/Apache24/bin/$comp" ]]; then
              echo "| $comp | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $comp | ❌ |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Package build artifacts
        if: success()
        run: |
          cd /c
          tar -czf apache24-${{ matrix.platform }}-${{ env.BUILD_TYPE }}.tar.gz Apache24/

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: apache24-${{ matrix.platform }}-${{ env.BUILD_TYPE }}
          path: /c/apache24-${{ matrix.platform }}-${{ env.BUILD_TYPE }}.tar.gz
          retention-days: 30

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.platform }}-${{ env.BUILD_TYPE }}
          path: |
            /c/Development/Apache24/build/**/*.log
            /c/Development/Apache24/build/**/CMakeFiles/CMakeOutput.log
            /c/Development/Apache24/build/**/CMakeFiles/CMakeError.log
          retention-days: 7
          if-no-files-found: ignore

  test:
    needs: [prepare, build]
    if: needs.prepare.outputs.should_build == 'true' && success()
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, x86]
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.platform == 'x64' && 'MINGW64' || 'MINGW32' }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: apache24-${{ matrix.platform }}-${{ env.BUILD_TYPE }}
          path: /c/

      - name: Extract and test
        run: |
          cd /c
          tar -xzf apache24-${{ matrix.platform }}-${{ env.BUILD_TYPE }}.tar.gz
          
          echo "Testing Apache HTTPD..."
          /c/Apache24/bin/httpd.exe -t -D FOREGROUND &
          HTTPD_PID=$!
          sleep 5
          
          if kill -0 $HTTPD_PID 2>/dev/null; then
            echo "✅ Apache HTTPD started successfully"
            kill $HTTPD_PID
          else
            echo "❌ Apache HTTPD failed to start"
            exit 1
          fi

  release:
    needs: [prepare, build, test]
    if: needs.prepare.outputs.should_build == 'true' && success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: apache24-*-${{ env.BUILD_TYPE }}
          path: artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: apache-${{ github.run_number }}
          release_name: Apache HTTPD Build ${{ github.run_number }}
          body: |
            Automated build of Apache HTTPD with dependencies
            
            **Build Configuration:**
            - Build Type: ${{ env.BUILD_TYPE }}
            - Platforms: x64, x86
            - Built on: ${{ github.run_date }}
            
            **Included Components:**
            - Apache HTTPD 2.4.65
            - OpenSSL 3.5.2
            - CURL 8.15.0
            - PCRE2 10.45
            - And many more dependencies
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for file in artifacts/*/apache24-*.tar.gz; do
            if [[ -f "$file" ]]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."
              gh release upload apache-${{ github.run_number }} "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs: [prepare, build, test, release]
    if: always() && needs.prepare.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.data.artifacts
              .filter(artifact => {
                const age = Date.now() - new Date(artifact.created_at).getTime();
                return age > 7 * 24 * 60 * 60 * 1000; // 7 days
              });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }