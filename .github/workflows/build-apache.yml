name: Build Apache HTTPD Stack (Windows)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: CMake build type
        type: choice
        required: true
        default: Release
        options: [Release, Debug]
      platform:
        description: Target architecture
        type: choice
        required: true
        default: x64
        options: [x64, x86]
  push:
    branches: [ main ]
    paths:
      - 'build_all.bat'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'build_all.bat'
      - '.github/workflows/**'

# Global constants only; do not reference env here via expressions
env:
  BUILD_BASE: C:\Development\Apache24\build
  PREFIX: C:\Apache24
  INSTALL_PDB: OFF

jobs:
  build:
    name: Build on Windows
    runs-on: windows-2022
    timeout-minutes: 360

    # Use job-level env; don't try to reference env within expressions here
    env:
      PLATFORM: ${{ inputs.platform }}
      BUILD_TYPE: ${{ inputs.build_type }}
      # Use the literal values defined at top-level env (injected automatically)
      BUILD_BASE: C:\Development\Apache24\build
      PREFIX: C:\Apache24
      INSTALL_PDB: OFF

    outputs:
      platform: ${{ steps.outvars.outputs.platform }}
      build_type: ${{ steps.outvars.outputs.build_type }}
      artifact_name: ${{ steps.outvars.outputs.artifact_name }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enable long paths (Windows)
        shell: pwsh
        run: git config --system core.longpaths true

      - name: Install dependencies (CMake, Perl, NASM, 7zip)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          choco feature enable -n allowGlobalConfirmation
          choco install cmake --installargs "ADD_CMAKE_TO_PATH=System" --no-progress
          choco install strawberryperl --no-progress
          choco install nasm --no-progress
          choco install 7zip --no-progress
          cmake --version
          perl -v | Out-Null
          nasm -v

      - name: Prepare cache keys
        id: cache-key
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $srcKey = "apache-src-$env:PLATFORM-$env:BUILD_TYPE"
          $prefixKey = "apache-prefix-$env:PLATFORM-$env:BUILD_TYPE"
          "srcKey=$srcKey" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "prefixKey=$prefixKey" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Cache extracted sources
        id: cache-src
        uses: actions/cache@v4
        with:
          path: C:\Development\Apache24\src
          key: ${{ steps.cache-key.outputs.srcKey }}

      - name: Cache install prefix (restore only)
        id: cache-prefix
        uses: actions/cache/restore@v4
        with:
          path: C:\Apache24
          key: ${{ steps.cache-key.outputs.prefixKey }}

      - name: Show MSVC
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" %PLATFORM%
          where cl
          where nmake

      - name: Run build script
        shell: cmd
        run: |
          echo Platform=%PLATFORM%
          echo BuildType=%BUILD_TYPE%
          echo BUILD_BASE=%BUILD_BASE%
          echo PREFIX=%PREFIX%
          echo INSTALL_PDB=%INSTALL_PDB%
          dir
          call build_all.bat

      - name: Save install prefix to cache (post-build)
        if: always()
        uses: actions/cache/save@v4
        with:
          path: C:\Apache24
          key: ${{ steps.cache-key.outputs.prefixKey }}-${{ github.run_id }}

      - name: Prepare outputs
        id: outvars
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $artifact = "Apache24-$env:PLATFORM-$env:BUILD_TYPE"
          "platform=$env:PLATFORM" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "build_type=$env:BUILD_TYPE" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "artifact_name=$artifact" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Upload build prefix
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.outvars.outputs.artifact_name }}
          path: C:\Apache24\**
          if-no-files-found: warn
          compression-level: 6
          retention-days: 14

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ steps.outvars.outputs.platform }}-${{ steps.outvars.outputs.build_type }}
          path: |
            C:\Development\Apache24\build\**\CMakeFiles\CMakeOutput.log
            C:\Development\Apache24\build\**\CMakeFiles\CMakeError.log
            C:\Development\Apache24\build\**\*.log
          if-no-files-found: ignore

  release:
    name: Draft GitHub Release
    needs: build
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' || github.event_name == 'push')
    runs-on: windows-2022
    permissions:
      contents: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: dist

      - name: Create release archive
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $zip = "Apache24-${{ needs.build.outputs.platform }}-${{ needs.build.outputs.build_type }}-${{ github.run_number }}.zip"
          if (Test-Path "dist") {
            if (Test-Path $zip) { Remove-Item $zip -Force }
            Compress-Archive -Path "dist\*" -DestinationPath $zip -CompressionLevel Optimal
            Write-Host "Zipped: $zip"
          } else {
            Write-Host "dist folder not found; skipping."
          }

      - name: Create GitHub Release (draft)
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: build-${{ github.run_number }}
          name: "Apache24 Build #${{ github.run_number }}"
          body: |
            Automated build for commit ${{ github.sha }}.
            Platform: ${{ needs.build.outputs.platform }}
            Build Type: ${{ needs.build.outputs.build_type }}
          files: |
            Apache24-*.zip