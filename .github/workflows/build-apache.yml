# .github/workflows/build-apache-msys2.yml
name: Build Apache HTTPD Stack (MSYS2 UCRT64 + VS17)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: CMake build type
        type: choice
        required: true
        default: Release
        options: [Release, Debug]
      platform:
        description: Target architecture
        type: choice
        required: true
        default: x64
        options: [x64]

env:
  BUILD_BASE: C:\Development\Apache24\build
  PREFIX: C:\Apache24
  INSTALL_PDB: OFF

jobs:
  build:
    name: Build Apache with MSYS2 (bash) + VS17 (MSVC)
    runs-on: windows-2022
    timeout-minutes: 360

    env:
      PLATFORM: ${{ inputs.platform }}
      BUILD_TYPE: ${{ inputs.build_type }}
      BUILD_BASE: C:\Development\Apache24\build
      PREFIX: C:\Apache24
      INSTALL_PDB: OFF

    outputs:
      platform: ${{ steps.outvars.outputs.platform }}
      build_type: ${{ steps.outvars.outputs.build_type }}
      artifact_name: ${{ steps.outvars.outputs.artifact_name }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure PLATFORM/BUILD_TYPE defaults
        id: ensure-defaults
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not $env:PLATFORM -or $env:PLATFORM -eq '') { "PLATFORM=x64" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8 }
          if (-not $env:BUILD_TYPE -or $env:BUILD_TYPE -eq '') { "BUILD_TYPE=Release" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8 }
          "Using PLATFORM=$env:PLATFORM, BUILD_TYPE=$env:BUILD_TYPE"

      - name: Enable long paths (Windows)
        shell: pwsh
        run: git config --system core.longpaths true

      - name: Install MSYS2 (UCRT64) base tools
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            base-devel
            git
            curl
            tar
            gzip
            xz
            unzip
            perl
            nasm
            zip
            p7zip

      - name: Install CMake (Windows) and 7-Zip (Windows)
        shell: pwsh
        run: |
          choco feature enable -n allowGlobalConfirmation
          choco install cmake --installargs "ADD_CMAKE_TO_PATH=System" --no-progress --yes
          choco install 7zip --no-progress --yes
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
          cmake --version
          7z -h | Out-Null

      - name: Setup MSVC 2022 (VS17, toolset v143)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ env.PLATFORM }}

      - name: Show MSVC
        shell: cmd
        run: |
          echo Using VS17 toolset v143
          where cl
          where nmake

      - name: Run build script (MSYS2 bash + MSVC)
        shell: msys2 {0}
        env:
          PLATFORM: ${{ env.PLATFORM }}
          BUILD_TYPE: ${{ env.BUILD_TYPE }}
          BUILD_BASE: ${{ env.BUILD_BASE }}
          PREFIX: ${{ env.PREFIX }}
          INSTALL_PDB: ${{ env.INSTALL_PDB }}
        run: |
          set -euo pipefail
          echo "MSYSTEM=$MSYSTEM"
          echo "Using bash: $(which bash)"
          echo "Using tar:  $(which tar)"
          echo "Using perl: $(which perl)"
          echo "Using nasm: $(which nasm)"; nasm -v

          # Добавляем Windows PATH внутрь MSYS2, чтобы видеть cmake, cl, nmake, 7z
          WINPATH="$(/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -NoLogo -NoProfile -Command '[System.Environment]::GetEnvironmentVariable(\"PATH\",\"Machine\")' | tr -d '\r')"
          export PATH="/c/Windows/system32:/c/Windows:/c/Program Files/CMake/bin:/c/Program Files/7-Zip:$(echo "$WINPATH" | tr ';' ':' | sed 's#\\#/#g'):$PATH"

          echo "cl location via cmd:"
          cmd.exe /c "where cl"
          echo "nmake location via cmd:"
          cmd.exe /c "where nmake"
          echo "cmake version:"
          cmake --version

          # Запуск bash-скрипта сборки
          chmod +x ./build_all.sh
          ./build_all.sh

      - name: Prepare outputs
        id: outvars
        if: always()
        shell: pwsh
        run: |
          $artifact = "Apache24-$env:PLATFORM-$env:BUILD_TYPE"
          "platform=$env:PLATFORM" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "build_type=$env:BUILD_TYPE" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "artifact_name=$artifact" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Upload build prefix
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.outvars.outputs.artifact_name }}
          path: C:\Apache24\**
          if-no-files-found: warn
          compression-level: 6
          retention-days: 14

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ steps.outvars.outputs.platform }}-${{ steps.outvars.outputs.build_type }}
          path: |
            C:\Development\Apache24\build\**\CMakeFiles\CMakeOutput.log
            C:\Development\Apache24\build\**\CMakeFiles\CMakeError.log
            C:\Development\Apache24\build\**\*.log
          if-no-files-found: ignore

  release:
    name: Draft GitHub Release
    needs: build
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' || github.event_name == 'push')
    runs-on: windows-2022
    permissions:
      contents: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: dist

      - name: Create release archive
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $zip = "Apache24-${{ needs.build.outputs.platform }}-${{ needs.build.outputs.build_type }}-${{ github.run_number }}.zip"
          if (Test-Path "dist") {
            if (Test-Path $zip) { Remove-Item $zip -Force }
            Compress-Archive -Path "dist\*" -DestinationPath $zip -CompressionLevel Optimal
            Write-Host "Zipped: $zip"
          } else {
            Write-Host "dist folder not found; skipping."
          }

      - name: Create GitHub Release (draft)
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: build-${{ github.run_number }}
          name: "Apache24 Build #${{ github.run_number }}"
          body: |
            Automated build for commit ${{ github.sha }}.
            Platform: ${{ needs.build.outputs.platform }}
            Build Type: ${{ needs.build.outputs.build_type }}
          files: |
            Apache24-*.zip